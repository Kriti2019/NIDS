import networkx as nx
import numpy as np
from scapy.all import rdpcap
import matplotlib.pyplot as plt
import placeholders as ph
from stream import gen_streams

# Function to calculate the probability of selecting a certain edge from the neighbors of o
def calculate_probability(o, x, Co):
    numerator = 1 / calculate_distance(o, x)
    denominator = sum([1 / calculate_distance(y, o) for y in Co])
    return numerator / denominator

# Function to calculate the distance between two edges
def calculate_distance(u, v):
    return abs(I[u] - I[v])

# Function to generate the network neighborhood for each edge
def generate_network_neighborhood(E, Co, p, q):
    N = {}
    for u in E:
        N[u] = []
        for _ in range(num_walks):
            v = u
            for _ in range(I[u]):
                neighbors = [n for n in Co[v] if n != u]
                if v == u:
                    probabilities = [p / calculate_distance(u, n) for n in neighbors]
                else:
                    probabilities = [calculate_probability(u, v, n, neighbors) for n in neighbors]
                v = np.random.choice(neighbors, p=probabilities)
            N[u].append(v)
    return N

# Function to optimize the neighborhood likelihood of all edges and update the spatio-temporal embeddings
def optimize_edge_embeddings(E, N, embedding_dim, num_iterations, learning_rate):
    r = {}
    for u in E:
        r[u] = np.random.rand(embedding_dim)
    
    for _ in range(num_iterations):
        for u in E:
            gradient = -len(N[u]) * np.log(sum([np.exp(np.dot(r[u], r[n])) for n in N[u]]))
            for n in N[u]:
                gradient += np.dot(r[u], r[n])
            r[u] += learning_rate * gradient
    
    return r

# Generate the graph
def generate_graph(pcap_file):
    streams = gen_streams(pcap_file)

    G = nx.Graph()

    for stream_key, stream in streams.items():
        internal_host = stream.internal_host
        external_node = stream.external_node

        G.add_edge(internal_host, external_node)

    pos = nx.spring_layout(G)
    nx.draw(G, pos, with_labels=True, node_color="skyblue", node_size=1500, font_size=8)
    plt.show()


    # Initialize the sets H, D, E, S, and I
    H = set()
    D = set()
    E = []
    S = {}
    I = {}

    # Iterate over the streams
    for index, stream in enumerate(streams.values()):
        # Add internal host and external node to respective sets
        H.add(stream.internal_host)
        D.add(stream.external_node)

        # Add edges to E set and incorporate temporal feature I and attributes S
        H_node = stream.internal_host
        D_node = stream.external_node
        E.append((H_node, D_node))  # Add edge to E set

        # Add attributes to the edge from S set
        tls_handshake_features = {
            'tls_version': stream.internal_host.tls_version,
            'cipher_suites': stream.internal_host.cipher_suites,
            'extensions': stream.internal_host.extensions
        }
        domain_name_features = {
            'domain_length': len(stream.external_node),
            'number_of_characters': len(stream.external_node),
            'character_ratio': ph.calculate_character_ratio(stream.external_node),
            'vowel_consonant_ratio': ph.calculate_vowel_consonant_ratio(stream.external_node)
        }
        side_channel_features = {
            'arrival_time': ph.calculate_arrival_time(stream),
            'packet_length': ph.calculate_packet_length(stream)
        }
        attributes = {
            'tls_handshake': tls_handshake_features,
            'domain_name': domain_name_features,
            'side_channel': side_channel_features,
            'temporal_feature': index  # Add temporal feature: Connection order of the host
        }

        S[(H_node, D_node)] = attributes  # Add attributes to S set
        I[(H_node, D_node)] = index  # Add temporal feature I

        G.add_edge(H_node, D_node, temporal_feature=index, attr_dict=attributes)

    # Add the sets H and D to the graph
    G.add_nodes_from(H, bipartite=0)
    G.add_nodes_from(D, bipartite=1)

    # Print the graph summary
    print(nx.info(G))

    # Plot the bipartite graph
    pos = nx.bipartite_layout(G, H)
    nx.draw(G, pos, with_labels=True, node_color='lightblue', node_size=500)
    plt.title('Host-Server Bipartite Graph')
    plt.show()

    # Print the attributes S and temporal feature I
    print("Attributes S:")
    for edge, attributes in S.items():
        print(edge, attributes)

    print("\nTemporal Feature I:")
    for edge, index in I.items():
        print(edge, index)

    return G, E, S, I

# Generate the graph
G, E, S, I = generate_graph(r"C:\Users\kriti\OneDrive\Desktop\output.pcap")

# Set hyperparameters
p = 0.5  # Hyperparameter for selecting the next step from the neighbors of o
q = 2.0  # Hyperparameter for controlling the probability of visiting new nodes

# Generate the network neighborhood
Co = {u: list(G.neighbors(u)) for u in G.nodes()}
num_walks = 10  # Number of random walks for each edge
N = generate_network_neighborhood(E, Co, p, q)

# Set embedding hyperparameters
embedding_dim = 128  # Specify the dimensionality of the edge embeddings
num_iterations = 100  # Number of iterations for optimizing the embeddings
learning_rate = 0.1  # Learning rate for optimizing the embeddings

# Optimize the edge embeddings
edge_embeddings = optimize_edge_embeddings(E, N, embedding_dim, num_iterations, learning_rate)

# Print the edge embeddings
for edge, embedding in edge_embeddings.items():
    print(f"Edge: {edge}, Embedding: {embedding}")
